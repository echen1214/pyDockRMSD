name: Build pydockrmsd

on:
  push:
    tags:
      - "*"
# https://github.com/actions/upload-release-asset

jobs:
  create_release:
    if: contains(github.ref, 'v')
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build:
    name: Build ${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
      # ubuntu-20.04, macOS-10.15,
        os: [ windows-2019]
    if: contains(github.ref, 'v')
    steps:
      - uses: actions/setup-python@v2
      - name: Checkout code
        uses: actions/checkout@v2
        id: checkout
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.10.0
      - name: Build wheels
        id: build_installation
        env:
          version: ${{ github.ref }}
          CIBW_ENVIRONMENT: "version=${{ github.ref }}"
        run: |
          python -m cibuildwheel --output-dir wheelhouse
      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create_release.outputs.id }}
          assets_path: ./wheelhouse/
      # - name: Run Unit Test
      #   if: ${{ contains(github.ref, 't') }}
      # - name: Generate Documentation
      #   if: ${{ contains(github.ref, 'd') && matrix.os == 'ubuntu-20.04' }}
      #   run: |
      #     pip install pdoc3
      - name: Deploy to PyPI Posix
        if: ${{ contains(github.ref, 'p') && matrix.os != 'windows-2019'}}
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install twine
          twine upload -u __token__ -p $TWINE_PASSWORD ./wheelhouse/*
      - name: Deploy to PyPI Windows
        if: ${{ contains(github.ref, 'p') && matrix.os == 'windows-2019'}}
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install twine
          twine upload -u __token__ -p $TWINE_PASSWORD dist ./wheelhouse/*