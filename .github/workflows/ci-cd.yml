name: Build pydockrmsd

on: 
  push:
    tags:
      - "*"
    # branches:
    #   - main
    # Sequence of patterns matched against refs/tags
# https://github.com/actions/upload-release-asset
# windows-2019

jobs:
  create_release:
    if: contains(github.ref, 'v')
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
  build:
    name: Build ${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macOS-10.15]
    if: contains(github.ref, 'v')
    steps:
      - uses: actions/setup-python@v2
      - name: Checkout code
        uses: actions/checkout@v2
        id: checkout
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==1.10.0
      - name: Build wheels
        id: build_installation
        env:
          version: ${{ github.ref }}
          CIBW_ENVIRONMENT: "version=${{ github.ref }}"
        run: |
          python -m cibuildwheel --output-dir wheelhouse
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./wheelhouse/
          asset_name: wheel-${{ matrix.os }}
          asset_content_type: application/octet-stream
      # - name: Run Unit Test
      #   if: ${{ contains(github.ref, 't') }}
      # - name: Generate Documentation
      #   if: ${{ contains(github.ref, 'd') && matrix.os == 'ubuntu-20.04' }}
      #   run: |
      #     pip install pdoc3
      - name: Deploy to PyPI
        if: ${{ contains(github.ref, 'p') && matrix.os == 'ubuntu-20.04' }}
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          set -eux ; ls -la ./wheelhouse/
        # python -m pip install twine
        # twine upload -u __token__ -p $TWINE_PASSWORD ./wheelhouse/*.whl